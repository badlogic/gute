!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.gute=e():t.gute=e()}(self,(function(){return(()=>{"use strict";var t={634:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.startGame=void 0;var n=i(607),o=i(677),s=i(974),r=i(380),a=i(233),h=i(52);e.startGame=function(t){(new l).start(t)};var l=function(){function t(){this.resources=[],this.lastFrame=0,this.inited=!1}return t.prototype.allResourcesLoaded=function(){for(var t=0,e=this.resources;t<e.length;t++)if(!e[t].loaded)return!1;return!0},t.prototype.initResourcesOnFirstClick=function(){if(this.allResourcesLoaded()&&!this.inited){this.inited=!0;for(var t=0,e=this.resources;t<e.length;t++)e[t].initOnFirstClick()}},t.prototype.mouseDownHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas;n.focus();var o=n.clientWidth,s=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/s*n.height),this.game.onMouseDown(this,t,e)},t.prototype.mouseUpHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas,o=n.clientWidth,s=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/s*n.height),this.game.onMouseUp(this,t,e)},t.prototype.keyDownHandler=function(t){this.initResourcesOnFirstClick(),this.game.onKeyDown(this,t)},t.prototype.keyUpHandler=function(t){this.game.onKeyUp(this,t)},t.prototype.start=function(t){var e=this;return this.game=t,this.graphics=new r.GraphicsImpl,this.graphics.canvas.addEventListener("mousedown",(function(t){try{0===t.button&&(e.mouseDownHandler(t.offsetX,t.offsetY),t.preventDefault(),t.stopPropagation())}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mouseup",(function(t){try{0===t.button&&(e.mouseUpHandler(t.offsetX,t.offsetY),t.preventDefault(),t.stopPropagation())}catch(t){console.log(t)}})),window.addEventListener("keydown",(function(t){e.keyDownHandler(t.key),t.preventDefault(),t.stopPropagation()})),window.addEventListener("keyup",(function(t){e.keyUpHandler(t.key),t.preventDefault(),t.stopPropagation()})),t.init(this),requestAnimationFrame((function(){e.loop()})),this},t.prototype.loop=function(){var t=this,e=(new Date).getTime(),i=0;0!==this.lastFrame&&(i=e-this.lastFrame),this.lastFrame=e,this.graphics.applyFont(),this.game.update(this,i),this.game.render(this,this.graphics),requestAnimationFrame((function(){t.loop()}))},t.prototype.loadMusic=function(t){var e=new a.SoundImpl(t,!0);return this.resources.push(e),e},t.prototype.loadSound=function(t){var e=new a.SoundImpl(t,!1);return this.resources.push(e),e},t.prototype.loadBitmap=function(t){var e=new o.BitmapImpl(t);return this.resources.push(e),e},t.prototype.loadScaledTileset=function(t,e,i,n){var o=new h.TilesetImpl(t,e,i,n);return this.resources.push(o),o},t.prototype.loadTileset=function(t,e,i){var n=new h.TilesetImpl(t,e,i,1);return this.resources.push(n),n},t.prototype.loadFont=function(t,e){return new s.FontImpl(t,e)},t.prototype.loadLDTK=function(t){var e=new n.LDTKWorld;this.resources.push(e);var i=new XMLHttpRequest;return i.open("GET",t,!0),i.onload=function(t){i.responseText&&e.load(JSON.parse(i.responseText))},i.send(null),e},t}()},705:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Keys=void 0;var i=function(){function t(){}return t.ESCAPE_KEY="Escape",t.ENTER_KEY="Enter",t.LEFT_KEY="ArrowLeft",t.RIGHT_KEY="ArrowRight",t.UP_KEY="ArrowUp",t.DOWN_KEY="ArrowDown",t.SPACE_KEY=" ",t.S_KEY="s",t.M_KEY="m",t.A_KEY="a",t.W_KEY="w",t.D_KEY="d",t.CONTROL_KEY="Control",t.META_KEY="Meta",t.ALT_KEY="Alt",t.TAB_KEY="Tab",t}();e.Keys=i},677:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BitmapImpl=void 0;var i=function(){function t(t){var e=this;this.width=0,this.height=0,this.loaded=!1,this.image=new Image,this.image.onload=function(){e.width=e.image.width,e.height=e.image.height,e.loaded=!0},this.image.src=t}return t.prototype.initOnFirstClick=function(){},t.prototype.getDrawable=function(){return this.image},t}();e.BitmapImpl=i},974:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FontImpl=void 0;var i=function(){function t(t,e){this.name=e;var i=document.createElement("style");i.innerHTML="@font-face { font-family: "+e+"; src: url('"+t+"'); } body { font-family: "+e+"; }",document.head.appendChild(i)}return t.prototype.apply=function(t,e){t.font=e+"px "+this.name},t}();e.FontImpl=i},380:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GraphicsImpl=void 0;var n=i(974),o="undefined"!=typeof InstallTrigger,s=function(){function t(t){this.canvas=t,this.width=t.width,this.height=t.height,this.loaded=!0}return t.prototype.getDrawable=function(){return this.canvas},t.prototype.initOnFirstClick=function(){},t}(),r=function(){function t(){this.fontSize=20,this.canvas=document.getElementById("gamecanvas"),this.ctx=this.canvas.getContext("2d",{alpha:!1}),this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.mozImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.canvas.style.fontSmooth="never",this.canvas.style.webkitFontSmoothing="none",this.canvas.style.imageRendering=o?"crisp-edges":"pixelated",this.font=new n.FontImpl("font.ttf","GuteDefault"),this.font&&this.applyFont()}return t.prototype.fitScreen=function(t){var e=Math.floor(window.innerWidth/t)*t,i=Math.floor(window.innerHeight/t)*t,n=e/t,o=i/t;this.canvas.style.position="absolute",this.canvas.style.top="0px",this.canvas.style.left="0px",this.canvas.width=n,this.canvas.height=o,this.canvas.style.width=e+"px",this.canvas.style.height=i+"px"},t.prototype.copy=function(){var t,e=document.createElement("canvas");return e.width=this.getWidth(),e.height=this.getHeight(),null===(t=e.getContext("2d"))||void 0===t||t.drawImage(this.canvas,0,0),new s(e)},t.prototype.getWidth=function(){return this.canvas.width},t.prototype.getHeight=function(){return this.canvas.height},t.prototype.push=function(){this.ctx.save()},t.prototype.pop=function(){this.ctx.restore()},t.prototype.translate=function(t,e){this.ctx.translate(t,e)},t.prototype.scale=function(t,e){this.ctx.scale(t,e)},t.prototype.applyFont=function(){this.font.apply(this.ctx,this.fontSize)},t.prototype.setFont=function(t){this.font=t,this.applyFont()},t.prototype.setFontSize=function(t){this.fontSize=t,this.applyFont()},t.prototype.drawString=function(t,e,i,n){this.ctx.fillStyle=n,this.ctx.fillText(i,t,e)},t.prototype.fillRect=function(t,e,i,n,o){this.ctx.fillStyle=o,this.ctx.fillRect(t,e,i,n)},t.prototype.drawBitmap=function(t,e,i){this.ctx.drawImage(i.getDrawable(),t,e)},t}();e.GraphicsImpl=r},233:(t,e)=>{var i,n;Object.defineProperty(e,"__esModule",{value:!0}),e.SoundImpl=void 0,"undefined"!=typeof window&&(i=window.AudioContext||window.webkitAudioContext),"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){o.CURRENT_MUSIC&&(document.hidden?o.CURRENT_MUSIC.stop():o.CURRENT_MUSIC.play(o.CURRENT_MUSIC.volume))}));var o=function(){function t(t,e){var i=this;this.loaded=!1,this.volume=1,this.music=!1,this.url=t,this.music=e;var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(t){var e=n.response;e&&(i.data=e,i.loaded=!0,i.tryLoad())},n.send(null)}return t.prototype.tryLoad=function(){var e=this;n&&this.data&&n.decodeAudioData(this.data,(function(i){e.buffer=i,t.CURRENT_MUSIC===e&&(t.CURRENT_MUSIC=null,e.play(e.volume))}),(function(t){console.log("Failed to load: "+e.url)}))},t.prototype.initOnFirstClick=function(){n||(n=new i).resume(),this.tryLoad()},t.prototype.play=function(e){this.volume=e,this.buffer?this.music&&(t.CURRENT_MUSIC!==this&&(t.CURRENT_MUSIC&&t.CURRENT_MUSIC.stop(),t.CURRENT_MUSIC=this),this.source)||(this.source=n.createBufferSource(),this.source.buffer=this.buffer,this.gain=n.createGain(),this.source.connect(this.gain),this.gain.connect(n.destination),this.music&&(this.gain.gain.value=0,this.source.loop=!0),this.source.start(0),this.music?this.gain.gain.linearRampToValueAtTime(e,n.currentTime+2):this.gain.gain.value=e):this.music&&(t.CURRENT_MUSIC=this)},t.prototype.stop=function(){if(this.source){if(this.music){this.gain.gain.linearRampToValueAtTime(0,n.currentTime+3);var t=this.source;setTimeout((function(){t.stop()}),4e3)}else this.source.stop();this.source=null}},t}();e.SoundImpl=o},52:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TilesetImpl=void 0;var i=function(){function t(t){this.canvas=t,this.width=t.width,this.height=t.height,this.loaded=!0}return t.prototype.getDrawable=function(){return this.canvas},t.prototype.initOnFirstClick=function(){},t}(),n=function(){function t(t,e,n,o){var s=this;void 0===o&&(o=1),this.loaded=!1,this.bitmaps=[],this.scanline=0,this.tileCount=0,e*=o,n*=o,this.tileWidth=e,this.tileHeight=n,this.image=new Image,this.image.onload=function(){var t;if(s.scaled(o),s.transformed){s.scanline=Math.floor(s.transformed.width/e);var r=Math.floor(s.transformed.height/n);s.tileCount=r*s.scanline;for(var a=0;a<r;a++)for(var h=0;h<s.scanline;h++){var l=document.createElement("canvas");l.width=e,l.height=n,null===(t=l.getContext("2d"))||void 0===t||t.drawImage(s.transformed,-h*e,-a*n),s.bitmaps.push(new i(l))}}s.image=null,s.transformed=null,s.loaded=!0},this.image.src=t}return t.prototype.getTilesAcross=function(){return this.scanline},t.prototype.scaled=function(t){var e=document.createElement("canvas"),i=document.createElement("canvas"),n=e.getContext("2d"),o=i.getContext("2d");if(null!==n&&null!==o&&this.image){e.width=this.image.width,e.height=this.image.height,i.width=this.image.width*t,i.height=this.image.height*t,n.drawImage(this.image,0,0);for(var s=n.getImageData(0,0,this.image.width,this.image.height),r=o.getImageData(0,0,i.width,i.height),a=0;a<s.height;a++)for(var h=0;h<s.width;h++)for(var l=[s.data[4*(a*s.width+h)+0],s.data[4*(a*s.width+h)+1],s.data[4*(a*s.width+h)+2],s.data[4*(a*s.width+h)+3]],u=0;u<t;u++)for(var p=a*t+u,d=0;d<t;d++)for(var c=h*t+d,f=0;f<4;f++)r.data[4*(p*r.width+c)+f]=l[f];o.putImageData(r,0,0),this.transformed=i}},t.prototype.getTileWidth=function(){return this.tileWidth},t.prototype.getTileHeight=function(){return this.tileHeight},t.prototype.getTileCount=function(){return this.tileCount},t.prototype.initOnFirstClick=function(){},t.prototype.getTile=function(t){return this.bitmaps[t]},t}();e.TilesetImpl=n},607:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKWorld=e.Step=e.Path=e.AStarPathFinder=e.Keys=e.startGame=void 0;var n=i(634);Object.defineProperty(e,"startGame",{enumerable:!0,get:function(){return n.startGame}});var o=i(705);Object.defineProperty(e,"Keys",{enumerable:!0,get:function(){return o.Keys}});var s=i(883);Object.defineProperty(e,"AStarPathFinder",{enumerable:!0,get:function(){return s.AStarPathFinder}});var r=i(482);Object.defineProperty(e,"Path",{enumerable:!0,get:function(){return r.Path}});var a=i(844);Object.defineProperty(e,"Step",{enumerable:!0,get:function(){return a.Step}});var h=i(968);Object.defineProperty(e,"LDTKWorld",{enumerable:!0,get:function(){return h.LDTKWorld}})},44:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKEntity=void 0;e.LDTKEntity=function(t,e,i){this.fields={},this.level=t,this.type=i.__identifier,this.x=i.px[0]/e.__gridSize,this.y=i.px[1]/e.__gridSize;for(var n=0,o=i.fieldInstances;n<o.length;n++){var s=o[n];this.fields[s.__identifier]=s.__value}}},191:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKLayer=void 0;var i=function(){function t(t,e){this.name=e.__identifier,this.level=t,this.width=e.__cWid,this.height=e.__cHei;var i=t.world.tilesetScanline,n=t.world.tilesetSize;this.tiles=[];for(var o=0;o<this.width*this.height;o++)this.tiles.push(0);for(var s=0,r=e.gridTiles;s<r.length;s++){var a=r[s],h=Math.floor(a.px[0]/e.__gridSize)+Math.floor(a.px[1]/e.__gridSize)*this.width,l=Math.floor(a.src[0]/n),u=Math.floor(a.src[1]/n)*i+l;this.tiles[h]=u+1}}return t.prototype.get=function(t,e){if(t<0||e<0||t>=this.width||e>=this.height)return 0;var i=t+e*this.width;return this.tiles[i]},t}();e.LDTKLayer=i},641:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKLevel=void 0;var n=i(44),o=i(191),s=function(){function t(t,e){this.layers=[],this.layerByName={},this.entities=[],this.world=t,this.id=e.identifier;for(var i=0,s=e.layerInstances;i<s.length;i++){var r=s[i];if("Entities"===r.__type)for(var a=0,h=r.entityInstances;a<h.length;a++){var l=h[a];this.entities.push(new n.LDTKEntity(this,r,l))}else{var u=new o.LDTKLayer(this,r);this.layers.splice(0,0,u),this.layerByName[u.name]=u}}this.layers.length>0?(this.width=this.layers[0].width,this.height=this.layers[0].height):(this.width=e.pxWid/t.gridSize,this.height=e.pxHei/t.gridSize)}return t.prototype.getFirstEntityOfType=function(t){for(var e=0,i=this.entities;e<i.length;e++){var n=i[e];if(n.type===t)return n}return null},t}();e.LDTKLevel=s},968:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKWorld=void 0;var n=i(641),o=function(){function t(){this.levels={},this.gridSize=0,this.tilesetScanline=0,this.tilesetSize=0,this.loaded=!1}return t.prototype.initOnFirstClick=function(){},t.prototype.load=function(t){this.gridSize=t.defaultGridSize;var e=t.defs.tilesets[0];this.tilesetScanline=e.pxWid/e.tileGridSize,this.tilesetSize=e.tileGridSize;for(var i=0,o=t.levels;i<o.length;i++){var s=o[i],r=new n.LDTKLevel(this,s);this.levels[r.id]=r}return this.loaded=!0,this},t}();e.LDTKWorld=o},883:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AStarPathFinder=void 0;var n=i(30),o=i(482),s=function(){function t(t){this.objectPool=[],this.openList=[],this.pathFindCounter=1,this.width=t.getMapWidth(),this.height=t.getMapHeight(),this.map=t,this.open=new Array,this.closed=new Array;for(var e=0;e<this.width*this.height;e++){for(var i=new Array,n=new Array,o=0;o<5;o++)i.push(0),n.push(0);this.open.push(i),this.closed.push(n)}}return t.prototype.clear=function(){for(var t=0;t<this.openList.length;t++)this.objectPool.push(this.openList[t]);this.openList=new Array,this.pathFindCounter++},t.prototype.generatePath=function(t){for(var e=t,i=new o.Path;null!=e;)i.add(e.x,e.y),e=e.parent;return i},t.prototype.blocked=function(t,e,i,n){var o=this.ignoreFinalOccupation&&this.atTarget(i,n);return!this.map.locationDiscovered(i,n)||!!this.map.blocked(this.mover,null,t,e,i,n,o,this.atTarget(i,n))},t.prototype.atTarget=function(t,e){for(var i=0;i<this.mover.getTilesWidth();i++)for(var n=0;n<this.mover.getTilesHeight();n++)if(t+i==this.tx&&e+n==this.ty)return!0;return!1},t.prototype.findPath=function(t,e,i,n,o,s){if(e=Math.floor(e),i=Math.floor(i),this.max=n,this.ignoreFinalOccupation=o,this.mover=t,this.tx=e,this.ty=i,this.blocked(e,i,e,i))return null;for(this.clear(),this.addLocation(null,Math.floor(t.getTileMapX()),Math.floor(t.getTileMapY()));this.openList.length>0;){var r=this.openList[0];if(this.openList.splice(0,1),this.atTarget(r.x,r.y))return this.generatePath(r);this.addLocation(r,r.x+1,r.y),this.addLocation(r,r.x-1,r.y),this.addLocation(r,r.x,r.y+1),this.addLocation(r,r.x,r.y-1)}return null},t.prototype.addLocation=function(e,i,n){var o=i=Math.floor(i),s=n=Math.floor(n),r=t.NONE;if(null!=e&&(o=e.x,(s=e.y)+1==n&&(r=t.NORTH_TO_SOUTH),s-1==n&&(r=t.SOUTH_TO_NORTH),o+1==i&&(r=t.WEST_TO_EAST),o-1==i&&(r=t.EAST_TO_WEST)),this.map.validLocation(i,n)&&this.open[i+n*this.width][r]!=this.pathFindCounter&&this.closed[i+n*this.width][r]!=this.pathFindCounter)if(null!=e&&e.depth>this.max)this.closed[i+n*this.width][r]=this.pathFindCounter;else if(this.map.locationDiscovered(i,n))if(this.blocked(o,s,i,n))this.closed[i+n*this.width][r]=this.pathFindCounter;else{this.open[i+n*this.width][r]=this.pathFindCounter;for(var a=this.createMapNode(i,n,e,this.getHeuristic(i,n)),h=0;h<this.openList.length;h++)if(this.openList[h].h>a.h)return void this.openList.splice(h,0,a);this.openList.push(a)}else this.closed[i+n*this.width][r]=this.pathFindCounter},t.prototype.getHeuristic=function(t,e){var i=Math.abs(this.tx-t),n=Math.abs(this.ty-e);return i*i+n*n},t.prototype.createMapNode=function(t,e,i,o){if(0==this.objectPool.length){var s=new n.MapNode;this.objectPool.push(s)}var r=this.objectPool[0];return this.objectPool.splice(0,1),r.x=t,r.y=e,r.parent=i,r.h=o,r.depth=null!=i?i.depth+1:0,r},t.NORTH_TO_SOUTH=0,t.EAST_TO_WEST=1,t.SOUTH_TO_NORTH=2,t.WEST_TO_EAST=3,t.NONE=4,t}();e.AStarPathFinder=s},30:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapNode=void 0;e.MapNode=function(){}},482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;var n=i(844),o=function(){function t(){this.steps=new Array}return t.prototype.add=function(t,e){this.steps.splice(0,0,new n.Step(t,e))},t.prototype.getLastStep=function(){return this.steps[this.steps.length-1]},t.prototype.pop=function(){var t=this.steps[0];return this.steps.splice(0,1),t},t}();e.Path=o},844:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Step=void 0;e.Step=function(t,e){this.x=t,this.y=e}}},e={};return function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={exports:{}};return t[n](s,s.exports,i),s.exports}(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ndXRlL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL0d1dGUudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9LZXlzLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvaW1wbC9CaXRtYXBJbXBsLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvaW1wbC9Gb250SW1wbC50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL2ltcGwvR3JhcGhpY3NJbXBsLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvaW1wbC9Tb3VuZEltcGwudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9pbXBsL1RpbGVzZXRJbXBsLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9sZHRrL0xEVEtFbnRpdHkudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9sZHRrL0xEVEtMYXllci50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL2xkdGsvTERUS0xldmVsLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvbGR0ay9MRFRLV29ybGQudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9wYXRoL0FTdGFyUGF0aEZpbmRlci50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3BhdGgvTWFwTm9kZS50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3BhdGgvUGF0aC50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3BhdGgvU3RlcC50cyIsIndlYnBhY2s6Ly9ndXRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2d1dGUvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwic3RhcnRHYW1lIiwiXzEiLCJCaXRtYXBJbXBsXzEiLCJGb250SW1wbF8xIiwiR3JhcGhpY3NJbXBsXzEiLCJTb3VuZEltcGxfMSIsIlRpbGVzZXRJbXBsXzEiLCJnYW1lIiwiR2FtZUxvb3AiLCJzdGFydCIsInRoaXMiLCJyZXNvdXJjZXMiLCJsYXN0RnJhbWUiLCJpbml0ZWQiLCJwcm90b3R5cGUiLCJhbGxSZXNvdXJjZXNMb2FkZWQiLCJfaSIsIl9hIiwibGVuZ3RoIiwibG9hZGVkIiwiaW5pdFJlc291cmNlc09uRmlyc3RDbGljayIsImluaXRPbkZpcnN0Q2xpY2siLCJtb3VzZURvd25IYW5kbGVyIiwieCIsInkiLCJpZCIsImNhbnZhcyIsImdyYXBoaWNzIiwiZm9jdXMiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiTWF0aCIsImZsb29yIiwib25Nb3VzZURvd24iLCJtb3VzZVVwSGFuZGxlciIsIm9uTW91c2VVcCIsImtleURvd25IYW5kbGVyIiwia2V5Iiwib25LZXlEb3duIiwia2V5VXBIYW5kbGVyIiwib25LZXlVcCIsIl90aGlzIiwiR3JhcGhpY3NJbXBsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiYnV0dG9uIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImUiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwiaW5pdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImxvb3AiLCJub3ciLCJEYXRlIiwiZ2V0VGltZSIsImRlbHRhIiwiYXBwbHlGb250IiwidXBkYXRlIiwicmVuZGVyIiwibG9hZE11c2ljIiwidXJsIiwic291bmQiLCJTb3VuZEltcGwiLCJwdXNoIiwibG9hZFNvdW5kIiwibG9hZEJpdG1hcCIsImJpdG1hcCIsIkJpdG1hcEltcGwiLCJsb2FkU2NhbGVkVGlsZXNldCIsInRpbGVXaWR0aCIsInRpbGVIZWlnaHQiLCJzY2FsZSIsInRpbGVzZXQiLCJUaWxlc2V0SW1wbCIsImxvYWRUaWxlc2V0IiwibG9hZEZvbnQiLCJuYW1lIiwiRm9udEltcGwiLCJsb2FkTERUSyIsIndvcmxkIiwiTERUS1dvcmxkIiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25sb2FkIiwicmVzcG9uc2VUZXh0IiwibG9hZCIsIkpTT04iLCJwYXJzZSIsInNlbmQiLCJLZXlzIiwiRVNDQVBFX0tFWSIsIkVOVEVSX0tFWSIsIkxFRlRfS0VZIiwiUklHSFRfS0VZIiwiVVBfS0VZIiwiRE9XTl9LRVkiLCJTUEFDRV9LRVkiLCJTX0tFWSIsIk1fS0VZIiwiQV9LRVkiLCJXX0tFWSIsIkRfS0VZIiwiQ09OVFJPTF9LRVkiLCJNRVRBX0tFWSIsIkFMVF9LRVkiLCJUQUJfS0VZIiwiaW1hZ2UiLCJJbWFnZSIsInNyYyIsImdldERyYXdhYmxlIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJhcHBseSIsImN0eCIsInNpemUiLCJmb250IiwiaXNGaXJlZm94IiwiSW5zdGFsbFRyaWdnZXIiLCJDb3B5Qml0bWFwIiwiZm9udFNpemUiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJhbHBoYSIsIndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsImZvbnRTbW9vdGgiLCJ3ZWJraXRGb250U21vb3RoaW5nIiwiaW1hZ2VSZW5kZXJpbmciLCJmaXRTY3JlZW4iLCJwaXhlbFNjYWxlIiwicmVhbFdpZHRoIiwiaW5uZXJXaWR0aCIsInJlYWxIZWlnaHQiLCJpbm5lckhlaWdodCIsInZpcnR1YWxXaWR0aCIsInZpcnR1YWxIZWlnaHQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJjb3B5IiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJkcmF3SW1hZ2UiLCJzYXZlIiwicG9wIiwicmVzdG9yZSIsInRyYW5zbGF0ZSIsInNldEZvbnQiLCJzZXRGb250U2l6ZSIsImRyYXdTdHJpbmciLCJ0ZXh0IiwiY29sIiwiZmlsbFN0eWxlIiwiZmlsbFRleHQiLCJmaWxsUmVjdCIsImRyYXdCaXRtYXAiLCJBdWRpb0NvbnRleHQiLCJBVURJT19DT05URVhUIiwid2Via2l0QXVkaW9Db250ZXh0IiwiQ1VSUkVOVF9NVVNJQyIsImhpZGRlbiIsInN0b3AiLCJwbGF5Iiwidm9sdW1lIiwibXVzaWMiLCJyZXNwb25zZVR5cGUiLCJhcnJheUJ1ZmZlciIsInJlc3BvbnNlIiwiZGF0YSIsInRyeUxvYWQiLCJkZWNvZGVBdWRpb0RhdGEiLCJidWZmZXIiLCJyZXN1bWUiLCJzb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJnYWluIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsImxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lIiwiY3VycmVudFRpbWUiLCJ0ZW1wU291cmNlXzEiLCJzZXRUaW1lb3V0IiwiVGlsZSIsImJpdG1hcHMiLCJzY2FubGluZSIsInRpbGVDb3VudCIsInNjYWxlZCIsInRyYW5zZm9ybWVkIiwiZGVwdGgiLCJnZXRUaWxlc0Fjcm9zcyIsInNyY0NhbnZhcyIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsInJvdyIsInNvdXJjZVBpeGVsIiwiZGVzdFJvdyIsImRlc3RDb2wiLCJpIiwicHV0SW1hZ2VEYXRhIiwiZ2V0VGlsZVdpZHRoIiwiZ2V0VGlsZUhlaWdodCIsImdldFRpbGVDb3VudCIsImdldFRpbGUiLCJ0aWxlIiwiU3RlcCIsIlBhdGgiLCJBU3RhclBhdGhGaW5kZXIiLCJHdXRlXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiS2V5c18xIiwiQVN0YXJQYXRoRmluZGVyXzEiLCJQYXRoXzEiLCJTdGVwXzEiLCJMRFRLV29ybGRfMSIsIkxEVEtFbnRpdHkiLCJsZXZlbCIsImxheWVyRGF0YSIsImZpZWxkcyIsInR5cGUiLCJfX2lkZW50aWZpZXIiLCJweCIsIl9fZ3JpZFNpemUiLCJmaWVsZEluc3RhbmNlcyIsImZpZWxkSW5zdGFuY2UiLCJfX3ZhbHVlIiwiTERUS0xheWVyIiwiX19jV2lkIiwiX19jSGVpIiwidGlsZXNldFNjYW5saW5lIiwidGlsZVNpemUiLCJ0aWxlc2V0U2l6ZSIsInRpbGVzIiwiZ3JpZFRpbGVzIiwicG9zSW5kZXgiLCJ0eCIsInRpbGVJbmRleCIsIkxEVEtMZXZlbCIsIkxEVEtFbnRpdHlfMSIsIkxEVEtMYXllcl8xIiwibGF5ZXJzIiwibGF5ZXJCeU5hbWUiLCJlbnRpdGllcyIsImlkZW50aWZpZXIiLCJsYXllckluc3RhbmNlcyIsIl9fdHlwZSIsIl9iIiwiX2MiLCJlbnRpdHlJbnN0YW5jZXMiLCJlbnRpdHlEYXRhIiwibGF5ZXIiLCJzcGxpY2UiLCJweFdpZCIsImdyaWRTaXplIiwicHhIZWkiLCJnZXRGaXJzdEVudGl0eU9mVHlwZSIsImVudGl0eSIsIkxEVEtMZXZlbF8xIiwibGV2ZWxzIiwianNvbiIsImRlZmF1bHRHcmlkU2l6ZSIsImRlZnMiLCJ0aWxlc2V0cyIsInRpbGVHcmlkU2l6ZSIsImxldmVsRGF0YSIsIk1hcE5vZGVfMSIsIm1hcCIsIm9iamVjdFBvb2wiLCJvcGVuTGlzdCIsInBhdGhGaW5kQ291bnRlciIsImdldE1hcFdpZHRoIiwiZ2V0TWFwSGVpZ2h0IiwiQXJyYXkiLCJjbG9zZWQiLCJvIiwiYyIsImoiLCJjbGVhciIsImdlbmVyYXRlUGF0aCIsIm5vZGUiLCJjdXJyZW50IiwicGF0aCIsImFkZCIsInBhcmVudCIsImJsb2NrZWQiLCJzeCIsInN5IiwiaWdub3JlQWN0b3JzIiwiaWdub3JlRmluYWxPY2N1cGF0aW9uIiwiYXRUYXJnZXQiLCJsb2NhdGlvbkRpc2NvdmVyZWQiLCJtb3ZlciIsInhzIiwiZ2V0VGlsZXNXaWR0aCIsInlzIiwiZ2V0VGlsZXNIZWlnaHQiLCJ0eSIsImZpbmRQYXRoIiwibWF4IiwicnVuQXdheSIsImFkZExvY2F0aW9uIiwiZ2V0VGlsZU1hcFgiLCJnZXRUaWxlTWFwWSIsImJlc3QiLCJkaXIiLCJOT05FIiwiTk9SVEhfVE9fU09VVEgiLCJTT1VUSF9UT19OT1JUSCIsIldFU1RfVE9fRUFTVCIsIkVBU1RfVE9fV0VTVCIsInZhbGlkTG9jYXRpb24iLCJjcmVhdGVNYXBOb2RlIiwiZ2V0SGV1cmlzdGljIiwiaCIsImR4IiwiYWJzIiwiZHkiLCJuIiwiTWFwTm9kZSIsInN0ZXBzIiwiZ2V0TGFzdFN0ZXAiLCJyZXN1bHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILEdBQ2UsaUJBQVpDLFFBQ2RBLFFBQWMsS0FBSUQsSUFFbEJELEVBQVcsS0FBSUMsSUFSakIsQ0FTR0ssTUFBTSxXQUNULE0sd0NDVEFDLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3REUCxFQUFRUSxlQUFZLEVBQ3BCLElBQUlDLEVBQUssRUFBUSxLQUNiQyxFQUFlLEVBQVEsS0FDdkJDLEVBQWEsRUFBUSxLQUNyQkMsRUFBaUIsRUFBUSxLQUN6QkMsRUFBYyxFQUFRLEtBQ3RCQyxFQUFnQixFQUFRLElBSzVCZCxFQUFRUSxVQUhSLFNBQW1CTyxJQUNILElBQUlDLEdBQVdDLE1BQU1GLElBR3JDLElBQUlDLEVBQTBCLFdBQzFCLFNBQVNBLElBQ0xFLEtBQUtDLFVBQVksR0FDakJELEtBQUtFLFVBQVksRUFDakJGLEtBQUtHLFFBQVMsRUF1SmxCLE9BckpBTCxFQUFTTSxVQUFVQyxtQkFBcUIsV0FDcEMsSUFBSyxJQUFJQyxFQUFLLEVBQUdDLEVBQUtQLEtBQUtDLFVBQVdLLEVBQUtDLEVBQUdDLE9BQVFGLElBRWxELElBRGVDLEVBQUdELEdBQ0pHLE9BQ1YsT0FBTyxFQUdmLE9BQU8sR0FFWFgsRUFBU00sVUFBVU0sMEJBQTRC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LElBQUlrTCxFQUFTclUsS0FBS21VLE1BQU0sR0FFeEIsT0FEQW5VLEtBQUttVSxNQUFNcEUsT0FBTyxFQUFHLEdBQ2RzRSxHQUVKcEgsRUFmYyxHQWlCekJuTyxFQUFRbU8sS0FBT0EsRyxZQ3BCZjlOLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3REUCxFQUFRa08sVUFBTyxFQVFmbE8sRUFBUWtPLEtBTkosU0FBY25NLEVBQUdDLEdBQ2JkLEtBQUthLEVBQUlBLEVBQ1RiLEtBQUtjLEVBQUlBLEtDTGJ3VCxFQUEyQixHLE9BRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWEzVixRQUdyQixJQUFJQyxFQUFTdVYsRUFBeUJFLEdBQVksQ0FHakQxVixRQUFTLElBT1YsT0FIQTZWLEVBQW9CSCxHQUFVelYsRUFBUUEsRUFBT0QsUUFBU3lWLEdBRy9DeFYsRUFBT0QsUUNsQld5VixDQUFvQixNIiwiZmlsZSI6ImluZGV4LW1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImd1dGVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZ3V0ZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdGFydEdhbWUgPSB2b2lkIDA7XG52YXIgXzEgPSByZXF1aXJlKFwiLlwiKTtcbnZhciBCaXRtYXBJbXBsXzEgPSByZXF1aXJlKFwiLi9pbXBsL0JpdG1hcEltcGxcIik7XG52YXIgRm9udEltcGxfMSA9IHJlcXVpcmUoXCIuL2ltcGwvRm9udEltcGxcIik7XG52YXIgR3JhcGhpY3NJbXBsXzEgPSByZXF1aXJlKFwiLi9pbXBsL0dyYXBoaWNzSW1wbFwiKTtcbnZhciBTb3VuZEltcGxfMSA9IHJlcXVpcmUoXCIuL2ltcGwvU291bmRJbXBsXCIpO1xudmFyIFRpbGVzZXRJbXBsXzEgPSByZXF1aXJlKFwiLi9pbXBsL1RpbGVzZXRJbXBsXCIpO1xudmFyIEdBTUVfTE9PUDtcbmZ1bmN0aW9uIHN0YXJ0R2FtZShnYW1lKSB7XG4gICAgR0FNRV9MT09QID0gbmV3IEdhbWVMb29wKCkuc3RhcnQoZ2FtZSk7XG59XG5leHBvcnRzLnN0YXJ0R2FtZSA9IHN0YXJ0R2FtZTtcbnZhciBHYW1lTG9vcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHYW1lTG9vcCgpIHtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5sYXN0RnJhbWUgPSAwO1xuICAgICAgICB0aGlzLmluaXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuYWxsUmVzb3VyY2VzTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5yZXNvdXJjZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAoIXJlc291cmNlLmxvYWRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5pbml0UmVzb3VyY2VzT25GaXJzdENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWxsUmVzb3VyY2VzTG9hZGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5pdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRlZCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5yZXNvdXJjZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc291cmNlID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHJlc291cmNlLmluaXRPbkZpcnN0Q2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLm1vdXNlRG93bkhhbmRsZXIgPSBmdW5jdGlvbiAoeCwgeSwgaWQpIHtcbiAgICAgICAgaWYgKGlkID09PSB2b2lkIDApIHsgaWQgPSAwOyB9XG4gICAgICAgIHRoaXMuaW5pdFJlc291cmNlc09uRmlyc3RDbGljaygpO1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5ncmFwaGljcy5jYW52YXM7XG4gICAgICAgIGNhbnZhcy5mb2N1cygpO1xuICAgICAgICB2YXIgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB4ID0gTWF0aC5mbG9vcigoeCAvIHdpZHRoKSAqIGNhbnZhcy53aWR0aCk7XG4gICAgICAgIHkgPSBNYXRoLmZsb29yKCh5IC8gaGVpZ2h0KSAqIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmdhbWUub25Nb3VzZURvd24odGhpcywgeCwgeSk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubW91c2VVcEhhbmRsZXIgPSBmdW5jdGlvbiAoeCwgeSwgaWQpIHtcbiAgICAgICAgaWYgKGlkID09PSB2b2lkIDApIHsgaWQgPSAwOyB9XG4gICAgICAgIHRoaXMuaW5pdFJlc291cmNlc09uRmlyc3RDbGljaygpO1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5ncmFwaGljcy5jYW52YXM7XG4gICAgICAgIHZhciB3aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHggPSBNYXRoLmZsb29yKCh4IC8gd2lkdGgpICogY2FudmFzLndpZHRoKTtcbiAgICAgICAgeSA9IE1hdGguZmxvb3IoKHkgLyBoZWlnaHQpICogY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuZ2FtZS5vbk1vdXNlVXAodGhpcywgeCwgeSk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUua2V5RG93bkhhbmRsZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMuaW5pdFJlc291cmNlc09uRmlyc3RDbGljaygpO1xuICAgICAgICB0aGlzLmdhbWUub25LZXlEb3duKHRoaXMsIGtleSk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUua2V5VXBIYW5kbGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmdhbWUub25LZXlVcCh0aGlzLCBrZXkpO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGdhbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5ncmFwaGljcyA9IG5ldyBHcmFwaGljc0ltcGxfMS5HcmFwaGljc0ltcGwoKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tb3VzZURvd25IYW5kbGVyKGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubW91c2VVcEhhbmRsZXIoZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5rZXlEb3duSGFuZGxlcihldmVudC5rZXkpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLmtleVVwSGFuZGxlcihldmVudC5rZXkpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2FtZS5pbml0KHRoaXMpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubG9vcCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgZGVsdGEgPSAwO1xuICAgICAgICBpZiAodGhpcy5sYXN0RnJhbWUgIT09IDApIHtcbiAgICAgICAgICAgIGRlbHRhID0gbm93IC0gdGhpcy5sYXN0RnJhbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0RnJhbWUgPSBub3c7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuYXBwbHlGb250KCk7XG4gICAgICAgIHRoaXMuZ2FtZS51cGRhdGUodGhpcywgZGVsdGEpO1xuICAgICAgICB0aGlzLmdhbWUucmVuZGVyKHRoaXMsIHRoaXMuZ3JhcGhpY3MpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubG9vcCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5sb2FkTXVzaWMgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IG5ldyBTb3VuZEltcGxfMS5Tb3VuZEltcGwodXJsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMucHVzaChzb3VuZCk7XG4gICAgICAgIHJldHVybiBzb3VuZDtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5sb2FkU291bmQgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IG5ldyBTb3VuZEltcGxfMS5Tb3VuZEltcGwodXJsLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2goc291bmQpO1xuICAgICAgICByZXR1cm4gc291bmQ7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZEJpdG1hcCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIGJpdG1hcCA9IG5ldyBCaXRtYXBJbXBsXzEuQml0bWFwSW1wbCh1cmwpO1xuICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKGJpdG1hcCk7XG4gICAgICAgIHJldHVybiBiaXRtYXA7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZFNjYWxlZFRpbGVzZXQgPSBmdW5jdGlvbiAodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsIHNjYWxlKSB7XG4gICAgICAgIHZhciB0aWxlc2V0ID0gbmV3IFRpbGVzZXRJbXBsXzEuVGlsZXNldEltcGwodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsIHNjYWxlKTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMucHVzaCh0aWxlc2V0KTtcbiAgICAgICAgcmV0dXJuIHRpbGVzZXQ7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZFRpbGVzZXQgPSBmdW5jdGlvbiAodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQpIHtcbiAgICAgICAgdmFyIHRpbGVzZXQgPSBuZXcgVGlsZXNldEltcGxfMS5UaWxlc2V0SW1wbCh1cmwsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCwgMSk7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2godGlsZXNldCk7XG4gICAgICAgIHJldHVybiB0aWxlc2V0O1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmxvYWRGb250ID0gZnVuY3Rpb24gKHVybCwgbmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZvbnRJbXBsXzEuRm9udEltcGwodXJsLCBuYW1lKTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5sb2FkTERUSyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIHdvcmxkID0gbmV3IF8xLkxEVEtXb3JsZCgpO1xuICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKHdvcmxkKTtcbiAgICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICByZXEub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAocmVxLnJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgICAgIHdvcmxkLmxvYWQoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJlcS5zZW5kKG51bGwpO1xuICAgICAgICByZXR1cm4gd29ybGQ7XG4gICAgfTtcbiAgICByZXR1cm4gR2FtZUxvb3A7XG59KCkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktleXMgPSB2b2lkIDA7XG52YXIgS2V5cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZXlzKCkge1xuICAgIH1cbiAgICBLZXlzLkVTQ0FQRV9LRVkgPSBcIkVzY2FwZVwiO1xuICAgIEtleXMuRU5URVJfS0VZID0gXCJFbnRlclwiO1xuICAgIEtleXMuTEVGVF9LRVkgPSBcIkFycm93TGVmdFwiO1xuICAgIEtleXMuUklHSFRfS0VZID0gXCJBcnJvd1JpZ2h0XCI7XG4gICAgS2V5cy5VUF9LRVkgPSBcIkFycm93VXBcIjtcbiAgICBLZXlzLkRPV05fS0VZID0gXCJBcnJvd0Rvd25cIjtcbiAgICBLZXlzLlNQQUNFX0tFWSA9IFwiIFwiO1xuICAgIEtleXMuU19LRVkgPSBcInNcIjtcbiAgICBLZXlzLk1fS0VZID0gXCJtXCI7XG4gICAgS2V5cy5BX0tFWSA9IFwiYVwiO1xuICAgIEtleXMuV19LRVkgPSBcIndcIjtcbiAgICBLZXlzLkRfS0VZID0gXCJkXCI7XG4gICAgS2V5cy5DT05UUk9MX0tFWSA9IFwiQ29udHJvbFwiO1xuICAgIEtleXMuTUVUQV9LRVkgPSBcIk1ldGFcIjtcbiAgICBLZXlzLkFMVF9LRVkgPSBcIkFsdFwiO1xuICAgIEtleXMuVEFCX0tFWSA9IFwiVGFiXCI7XG4gICAgcmV0dXJuIEtleXM7XG59KCkpO1xuZXhwb3J0cy5LZXlzID0gS2V5cztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CaXRtYXBJbXBsID0gdm9pZCAwO1xudmFyIEJpdG1hcEltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQml0bWFwSW1wbCh1cmwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICB0aGlzLmltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLndpZHRoID0gX3RoaXMuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICBfdGhpcy5oZWlnaHQgPSBfdGhpcy5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICBfdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IHVybDtcbiAgICB9XG4gICAgQml0bWFwSW1wbC5wcm90b3R5cGUuaW5pdE9uRmlyc3RDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIEJpdG1hcEltcGwucHJvdG90eXBlLmdldERyYXdhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZTtcbiAgICB9O1xuICAgIHJldHVybiBCaXRtYXBJbXBsO1xufSgpKTtcbmV4cG9ydHMuQml0bWFwSW1wbCA9IEJpdG1hcEltcGw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRm9udEltcGwgPSB2b2lkIDA7XG52YXIgRm9udEltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRm9udEltcGwodXJsLCBuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gXCJAZm9udC1mYWNlIHsgZm9udC1mYW1pbHk6IFwiICsgbmFtZSArIFwiOyBzcmM6IHVybCgnXCIgKyB1cmwgKyBcIicpOyB9IGJvZHkgeyBmb250LWZhbWlseTogXCIgKyBuYW1lICsgXCI7IH1cIjtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICAgIEZvbnRJbXBsLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIChjdHgsIHNpemUpIHtcbiAgICAgICAgY3R4LmZvbnQgPSBzaXplICsgXCJweCBcIiArIHRoaXMubmFtZTtcbiAgICB9O1xuICAgIHJldHVybiBGb250SW1wbDtcbn0oKSk7XG5leHBvcnRzLkZvbnRJbXBsID0gRm9udEltcGw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JhcGhpY3NJbXBsID0gdm9pZCAwO1xudmFyIEZvbnRJbXBsXzEgPSByZXF1aXJlKFwiLi9Gb250SW1wbFwiKTtcbnZhciBpc0ZpcmVmb3ggPSB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnO1xudmFyIENvcHlCaXRtYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29weUJpdG1hcChjYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgICBDb3B5Qml0bWFwLnByb3RvdHlwZS5nZXREcmF3YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzO1xuICAgIH07XG4gICAgQ29weUJpdG1hcC5wcm90b3R5cGUuaW5pdE9uRmlyc3RDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBDb3B5Qml0bWFwO1xufSgpKTtcbnZhciBHcmFwaGljc0ltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR3JhcGhpY3NJbXBsKCkge1xuICAgICAgICB0aGlzLmZvbnRTaXplID0gMjA7XG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lY2FudmFzXCIpO1xuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7IGFscGhhOiBmYWxzZSB9KTtcbiAgICAgICAgdGhpcy5jdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3R4Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUuZm9udFNtb290aCA9IFwibmV2ZXJcIjtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2Via2l0Rm9udFNtb290aGluZyA9IFwibm9uZVwiO1xuICAgICAgICBpZiAoaXNGaXJlZm94KSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5pbWFnZVJlbmRlcmluZyA9IFwiY3Jpc3AtZWRnZXNcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmltYWdlUmVuZGVyaW5nID0gXCJwaXhlbGF0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvbnQgPSBuZXcgRm9udEltcGxfMS5Gb250SW1wbChcImZvbnQudHRmXCIsIFwiR3V0ZURlZmF1bHRcIik7XG4gICAgICAgIGlmICh0aGlzLmZvbnQpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlGb250KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5maXRTY3JlZW4gPSBmdW5jdGlvbiAocGl4ZWxTY2FsZSkge1xuICAgICAgICB2YXIgcmVhbFdpZHRoID0gTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJXaWR0aCAvIHBpeGVsU2NhbGUpICogcGl4ZWxTY2FsZTtcbiAgICAgICAgdmFyIHJlYWxIZWlnaHQgPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lckhlaWdodCAvIHBpeGVsU2NhbGUpICogcGl4ZWxTY2FsZTtcbiAgICAgICAgdmFyIHZpcnR1YWxXaWR0aCA9IHJlYWxXaWR0aCAvIHBpeGVsU2NhbGU7XG4gICAgICAgIHZhciB2aXJ0dWFsSGVpZ2h0ID0gcmVhbEhlaWdodCAvIHBpeGVsU2NhbGU7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB2aXJ0dWFsV2lkdGg7XG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHZpcnR1YWxIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLndpZHRoID0gcmVhbFdpZHRoICsgXCJweFwiO1xuICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSByZWFsSGVpZ2h0ICsgXCJweFwiO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICBjYW52YXMud2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLmdldEhlaWdodCgpO1xuICAgICAgICAoX2EgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZHJhd0ltYWdlKHRoaXMuY2FudmFzLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb3B5Qml0bWFwKGNhbnZhcyk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHRoaXMuY3R4LnNjYWxlKHgsIHkpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5hcHBseUZvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm9udC5hcHBseSh0aGlzLmN0eCwgdGhpcy5mb250U2l6ZSk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLnNldEZvbnQgPSBmdW5jdGlvbiAoZm9udCkge1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmFwcGx5Rm9udCgpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5zZXRGb250U2l6ZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgIHRoaXMuZm9udFNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLmFwcGx5Rm9udCgpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5kcmF3U3RyaW5nID0gZnVuY3Rpb24gKHgsIHksIHRleHQsIGNvbCkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2w7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KHRleHQsIHgsIHkpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5maWxsUmVjdCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBjb2wpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gY29sO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZHJhd0JpdG1hcCA9IGZ1bmN0aW9uICh4LCB5LCBiaXRtYXApIHtcbiAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKGJpdG1hcC5nZXREcmF3YWJsZSgpLCB4LCB5KTtcbiAgICB9O1xuICAgIHJldHVybiBHcmFwaGljc0ltcGw7XG59KCkpO1xuZXhwb3J0cy5HcmFwaGljc0ltcGwgPSBHcmFwaGljc0ltcGw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU291bmRJbXBsID0gdm9pZCAwO1xudmFyIEF1ZGlvQ29udGV4dDtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xufVxudmFyIEFVRElPX0NPTlRFWFQ7XG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIGlmIChTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQykge1xuICAgICAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgICAgICBTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQy5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQy5wbGF5KFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDLnZvbHVtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XG59XG52YXIgU291bmRJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNvdW5kSW1wbCh1cmwsIG11c2ljKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudm9sdW1lID0gMTtcbiAgICAgICAgdGhpcy5tdXNpYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5tdXNpYyA9IG11c2ljO1xuICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcS5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHJlcS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBhcnJheUJ1ZmZlciA9IHJlcS5yZXNwb25zZTtcbiAgICAgICAgICAgIGlmIChhcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBhcnJheUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyeUxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmVxLnNlbmQobnVsbCk7XG4gICAgfVxuICAgIFNvdW5kSW1wbC5wcm90b3R5cGUudHJ5TG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKEFVRElPX0NPTlRFWFQgJiYgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBBVURJT19DT05URVhULmRlY29kZUF1ZGlvRGF0YSh0aGlzLmRhdGEsIGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgICAgICAgICAgaWYgKFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDID09PSBfdGhpcykge1xuICAgICAgICAgICAgICAgICAgICBTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBsYXkoX3RoaXMudm9sdW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgeyBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBsb2FkOiBcIiArIF90aGlzLnVybCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTb3VuZEltcGwucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghQVVESU9fQ09OVEVYVCkge1xuICAgICAgICAgICAgQVVESU9fQ09OVEVYVCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICAgICAgICAgIEFVRElPX0NPTlRFWFQucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cnlMb2FkKCk7XG4gICAgfTtcbiAgICBTb3VuZEltcGwucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAodm9sdW1lKSB7XG4gICAgICAgIHRoaXMudm9sdW1lID0gdm9sdW1lO1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tdXNpYykge1xuICAgICAgICAgICAgICAgIFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDID0gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tdXNpYykge1xuICAgICAgICAgICAgaWYgKFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgaWYgKFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDKSB7XG4gICAgICAgICAgICAgICAgICAgIFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgU291bmRJbXBsLkNVUlJFTlRfTVVTSUMgPSB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc291cmNlID0gQVVESU9fQ09OVEVYVC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5zb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMuZ2FpbiA9IEFVRElPX0NPTlRFWFQuY3JlYXRlR2FpbigpO1xuICAgICAgICB0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZ2Fpbik7XG4gICAgICAgIHRoaXMuZ2Fpbi5jb25uZWN0KEFVRElPX0NPTlRFWFQuZGVzdGluYXRpb24pO1xuICAgICAgICBpZiAodGhpcy5tdXNpYykge1xuICAgICAgICAgICAgdGhpcy5nYWluLmdhaW4udmFsdWUgPSAwO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UubG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zb3VyY2Uuc3RhcnQoMCk7XG4gICAgICAgIGlmICh0aGlzLm11c2ljKSB7XG4gICAgICAgICAgICB0aGlzLmdhaW4uZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh2b2x1bWUsIEFVRElPX0NPTlRFWFQuY3VycmVudFRpbWUgKyAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2Fpbi5nYWluLnZhbHVlID0gdm9sdW1lO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTb3VuZEltcGwucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubXVzaWMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhaW4uZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLCBBVURJT19DT05URVhULmN1cnJlbnRUaW1lICsgMyk7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBTb3VyY2VfMSA9IHRoaXMuc291cmNlO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wU291cmNlXzEuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH0sIDQwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2Uuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU291bmRJbXBsO1xufSgpKTtcbmV4cG9ydHMuU291bmRJbXBsID0gU291bmRJbXBsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRpbGVzZXRJbXBsID0gdm9pZCAwO1xudmFyIFRpbGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGlsZShjYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgICBUaWxlLnByb3RvdHlwZS5nZXREcmF3YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzO1xuICAgIH07XG4gICAgVGlsZS5wcm90b3R5cGUuaW5pdE9uRmlyc3RDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBUaWxlO1xufSgpKTtcbnZhciBUaWxlc2V0SW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaWxlc2V0SW1wbCh1cmwsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCwgc2NhbGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxOyB9XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYml0bWFwcyA9IFtdO1xuICAgICAgICB0aGlzLnNjYW5saW5lID0gMDtcbiAgICAgICAgdGhpcy50aWxlQ291bnQgPSAwO1xuICAgICAgICB0aWxlV2lkdGggKj0gc2NhbGU7XG4gICAgICAgIHRpbGVIZWlnaHQgKj0gc2NhbGU7XG4gICAgICAgIHRoaXMudGlsZVdpZHRoID0gdGlsZVdpZHRoO1xuICAgICAgICB0aGlzLnRpbGVIZWlnaHQgPSB0aWxlSGVpZ2h0O1xuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgX3RoaXMuc2NhbGVkKHNjYWxlKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy50cmFuc2Zvcm1lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNjYW5saW5lID0gTWF0aC5mbG9vcihfdGhpcy50cmFuc2Zvcm1lZC53aWR0aCAvIHRpbGVXaWR0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGRlcHRoID0gTWF0aC5mbG9vcihfdGhpcy50cmFuc2Zvcm1lZC5oZWlnaHQgLyB0aWxlSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aWxlQ291bnQgPSBkZXB0aCAqIF90aGlzLnNjYW5saW5lO1xuICAgICAgICAgICAgICAgIC8vIGN1dCB0aGUgaW1hZ2UgaW50byBwaWVjZXNcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGRlcHRoOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBfdGhpcy5zY2FubGluZTsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHRpbGVXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aWxlSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRyYXdJbWFnZShfdGhpcy50cmFuc2Zvcm1lZCwgLXggKiB0aWxlV2lkdGgsIC15ICogdGlsZUhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5iaXRtYXBzLnB1c2gobmV3IFRpbGUoY2FudmFzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmcmVlIGltYWdlIGJhc2VzXG4gICAgICAgICAgICBfdGhpcy5pbWFnZSA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy50cmFuc2Zvcm1lZCA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IHVybDtcbiAgICB9XG4gICAgVGlsZXNldEltcGwucHJvdG90eXBlLmdldFRpbGVzQWNyb3NzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2FubGluZTtcbiAgICB9O1xuICAgIFRpbGVzZXRJbXBsLnByb3RvdHlwZS5zY2FsZWQgPSBmdW5jdGlvbiAoc2NhbGUpIHtcbiAgICAgICAgdmFyIHNyY0NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICB2YXIgc3JjID0gc3JjQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGlmIChzcmMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW1hZ2UpIHtcbiAgICAgICAgICAgIHNyY0NhbnZhcy53aWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICBzcmNDYW52YXMuaGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSB0aGlzLmltYWdlLndpZHRoICogc2NhbGU7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQgKiBzY2FsZTtcbiAgICAgICAgICAgIHNyYy5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICB2YXIgaW1hZ2VEYXRhID0gc3JjLmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLmltYWdlLndpZHRoLCB0aGlzLmltYWdlLmhlaWdodCk7XG4gICAgICAgICAgICB2YXIgc2NhbGVkID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgaW1hZ2VEYXRhLmhlaWdodDsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBpbWFnZURhdGEud2lkdGg7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VQaXhlbCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhWyhyb3cgKiBpbWFnZURhdGEud2lkdGggKyBjb2wpICogNCArIDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbKHJvdyAqIGltYWdlRGF0YS53aWR0aCArIGNvbCkgKiA0ICsgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZURhdGEuZGF0YVsocm93ICogaW1hZ2VEYXRhLndpZHRoICsgY29sKSAqIDQgKyAyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhWyhyb3cgKiBpbWFnZURhdGEud2lkdGggKyBjb2wpICogNCArIDNdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2NhbGU7IHkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RSb3cgPSByb3cgKiBzY2FsZSArIHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNjYWxlOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVzdENvbCA9IGNvbCAqIHNjYWxlICsgeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZWQuZGF0YVsoZGVzdFJvdyAqIHNjYWxlZC53aWR0aCArIGRlc3RDb2wpICogNCArIGldID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBpeGVsW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5wdXRJbWFnZURhdGEoc2NhbGVkLCAwLCAwKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtZWQgPSBjYW52YXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbGVzZXRJbXBsLnByb3RvdHlwZS5nZXRUaWxlV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVXaWR0aDtcbiAgICB9O1xuICAgIFRpbGVzZXRJbXBsLnByb3RvdHlwZS5nZXRUaWxlSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlSGVpZ2h0O1xuICAgIH07XG4gICAgVGlsZXNldEltcGwucHJvdG90eXBlLmdldFRpbGVDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZUNvdW50O1xuICAgIH07XG4gICAgVGlsZXNldEltcGwucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBUaWxlc2V0SW1wbC5wcm90b3R5cGUuZ2V0VGlsZSA9IGZ1bmN0aW9uICh0aWxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJpdG1hcHNbdGlsZV07XG4gICAgfTtcbiAgICByZXR1cm4gVGlsZXNldEltcGw7XG59KCkpO1xuZXhwb3J0cy5UaWxlc2V0SW1wbCA9IFRpbGVzZXRJbXBsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxEVEtXb3JsZCA9IGV4cG9ydHMuU3RlcCA9IGV4cG9ydHMuUGF0aCA9IGV4cG9ydHMuQVN0YXJQYXRoRmluZGVyID0gZXhwb3J0cy5LZXlzID0gZXhwb3J0cy5zdGFydEdhbWUgPSB2b2lkIDA7XG52YXIgR3V0ZV8xID0gcmVxdWlyZShcIi4vR3V0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXJ0R2FtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gR3V0ZV8xLnN0YXJ0R2FtZTsgfSB9KTtcbnZhciBLZXlzXzEgPSByZXF1aXJlKFwiLi9LZXlzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gS2V5c18xLktleXM7IH0gfSk7XG52YXIgQVN0YXJQYXRoRmluZGVyXzEgPSByZXF1aXJlKFwiLi9wYXRoL0FTdGFyUGF0aEZpbmRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFTdGFyUGF0aEZpbmRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQVN0YXJQYXRoRmluZGVyXzEuQVN0YXJQYXRoRmluZGVyOyB9IH0pO1xudmFyIFBhdGhfMSA9IHJlcXVpcmUoXCIuL3BhdGgvUGF0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBhdGhfMS5QYXRoOyB9IH0pO1xudmFyIFN0ZXBfMSA9IHJlcXVpcmUoXCIuL3BhdGgvU3RlcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0ZXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFN0ZXBfMS5TdGVwOyB9IH0pO1xudmFyIExEVEtXb3JsZF8xID0gcmVxdWlyZShcIi4vbGR0ay9MRFRLV29ybGRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMRFRLV29ybGRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIExEVEtXb3JsZF8xLkxEVEtXb3JsZDsgfSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MRFRLRW50aXR5ID0gdm9pZCAwO1xudmFyIExEVEtFbnRpdHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTERUS0VudGl0eShsZXZlbCwgbGF5ZXJEYXRhLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuZmllbGRzID0ge307XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy50eXBlID0gZGF0YS5fX2lkZW50aWZpZXI7XG4gICAgICAgIHRoaXMueCA9IGRhdGEucHhbMF0gLyBsYXllckRhdGEuX19ncmlkU2l6ZTtcbiAgICAgICAgdGhpcy55ID0gZGF0YS5weFsxXSAvIGxheWVyRGF0YS5fX2dyaWRTaXplO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZGF0YS5maWVsZEluc3RhbmNlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBmaWVsZEluc3RhbmNlID0gX2FbX2ldO1xuICAgICAgICAgICAgdGhpcy5maWVsZHNbZmllbGRJbnN0YW5jZS5fX2lkZW50aWZpZXJdID0gZmllbGRJbnN0YW5jZS5fX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBMRFRLRW50aXR5O1xufSgpKTtcbmV4cG9ydHMuTERUS0VudGl0eSA9IExEVEtFbnRpdHk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTERUS0xheWVyID0gdm9pZCAwO1xudmFyIExEVEtMYXllciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMRFRLTGF5ZXIobGV2ZWwsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gZGF0YS5fX2lkZW50aWZpZXI7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEuX19jV2lkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGRhdGEuX19jSGVpO1xuICAgICAgICB2YXIgc2NhbmxpbmUgPSBsZXZlbC53b3JsZC50aWxlc2V0U2NhbmxpbmU7XG4gICAgICAgIHZhciB0aWxlU2l6ZSA9IGxldmVsLndvcmxkLnRpbGVzZXRTaXplO1xuICAgICAgICB0aGlzLnRpbGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXMucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZGF0YS5ncmlkVGlsZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgdGlsZSA9IF9hW19pXTtcbiAgICAgICAgICAgIHZhciB4ID0gTWF0aC5mbG9vcih0aWxlLnB4WzBdIC8gZGF0YS5fX2dyaWRTaXplKTtcbiAgICAgICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcih0aWxlLnB4WzFdIC8gZGF0YS5fX2dyaWRTaXplKTtcbiAgICAgICAgICAgIHZhciBwb3NJbmRleCA9IHggKyAoeSAqIHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgdmFyIHR4ID0gTWF0aC5mbG9vcih0aWxlLnNyY1swXSAvIHRpbGVTaXplKTtcbiAgICAgICAgICAgIHZhciB0eSA9IE1hdGguZmxvb3IodGlsZS5zcmNbMV0gLyB0aWxlU2l6ZSk7XG4gICAgICAgICAgICB2YXIgdGlsZUluZGV4ID0gKHR5ICogc2NhbmxpbmUpICsgdHg7XG4gICAgICAgICAgICB0aGlzLnRpbGVzW3Bvc0luZGV4XSA9IHRpbGVJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgTERUS0xheWVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBpZiAoKHggPCAwKSB8fCAoeSA8IDApIHx8ICh4ID49IHRoaXMud2lkdGgpIHx8ICh5ID49IHRoaXMuaGVpZ2h0KSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBvc0luZGV4ID0geCArICh5ICogdGhpcy53aWR0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVzW3Bvc0luZGV4XTtcbiAgICB9O1xuICAgIHJldHVybiBMRFRLTGF5ZXI7XG59KCkpO1xuZXhwb3J0cy5MRFRLTGF5ZXIgPSBMRFRLTGF5ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTERUS0xldmVsID0gdm9pZCAwO1xudmFyIExEVEtFbnRpdHlfMSA9IHJlcXVpcmUoXCIuL0xEVEtFbnRpdHlcIik7XG52YXIgTERUS0xheWVyXzEgPSByZXF1aXJlKFwiLi9MRFRLTGF5ZXJcIik7XG52YXIgTERUS0xldmVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExEVEtMZXZlbCh3b3JsZCwgZGF0YSkge1xuICAgICAgICB0aGlzLmxheWVycyA9IFtdO1xuICAgICAgICB0aGlzLmxheWVyQnlOYW1lID0ge307XG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBbXTtcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xuICAgICAgICB0aGlzLmlkID0gZGF0YS5pZGVudGlmaWVyO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZGF0YS5sYXllckluc3RhbmNlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBsYXllckRhdGEgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAobGF5ZXJEYXRhLl9fdHlwZSA9PT0gXCJFbnRpdGllc1wiKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IGxheWVyRGF0YS5lbnRpdHlJbnN0YW5jZXM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHlEYXRhID0gX2NbX2JdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzLnB1c2gobmV3IExEVEtFbnRpdHlfMS5MRFRLRW50aXR5KHRoaXMsIGxheWVyRGF0YSwgZW50aXR5RGF0YSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsYXllciA9IG5ldyBMRFRLTGF5ZXJfMS5MRFRLTGF5ZXIodGhpcywgbGF5ZXJEYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVycy5zcGxpY2UoMCwgMCwgbGF5ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXJCeU5hbWVbbGF5ZXIubmFtZV0gPSBsYXllcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubGF5ZXJzWzBdLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmxheWVyc1swXS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gZGF0YS5weFdpZCAvIHdvcmxkLmdyaWRTaXplO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBkYXRhLnB4SGVpIC8gd29ybGQuZ3JpZFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgTERUS0xldmVsLnByb3RvdHlwZS5nZXRGaXJzdEVudGl0eU9mVHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmVudGl0aWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGVudGl0eSA9IF9hW19pXTtcbiAgICAgICAgICAgIGlmIChlbnRpdHkudHlwZSA9PT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gTERUS0xldmVsO1xufSgpKTtcbmV4cG9ydHMuTERUS0xldmVsID0gTERUS0xldmVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxEVEtXb3JsZCA9IHZvaWQgMDtcbnZhciBMRFRLTGV2ZWxfMSA9IHJlcXVpcmUoXCIuL0xEVEtMZXZlbFwiKTtcbnZhciBMRFRLV29ybGQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTERUS1dvcmxkKCkge1xuICAgICAgICB0aGlzLmxldmVscyA9IHt9O1xuICAgICAgICB0aGlzLmdyaWRTaXplID0gMDtcbiAgICAgICAgdGhpcy50aWxlc2V0U2NhbmxpbmUgPSAwO1xuICAgICAgICB0aGlzLnRpbGVzZXRTaXplID0gMDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgTERUS1dvcmxkLnByb3RvdHlwZS5pbml0T25GaXJzdENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgTERUS1dvcmxkLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgdGhpcy5ncmlkU2l6ZSA9IGpzb24uZGVmYXVsdEdyaWRTaXplO1xuICAgICAgICB2YXIgdGlsZXNldCA9IGpzb24uZGVmcy50aWxlc2V0c1swXTtcbiAgICAgICAgdGhpcy50aWxlc2V0U2NhbmxpbmUgPSB0aWxlc2V0LnB4V2lkIC8gdGlsZXNldC50aWxlR3JpZFNpemU7XG4gICAgICAgIHRoaXMudGlsZXNldFNpemUgPSB0aWxlc2V0LnRpbGVHcmlkU2l6ZTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGpzb24ubGV2ZWxzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGxldmVsRGF0YSA9IF9hW19pXTtcbiAgICAgICAgICAgIHZhciBsZXZlbCA9IG5ldyBMRFRLTGV2ZWxfMS5MRFRLTGV2ZWwodGhpcywgbGV2ZWxEYXRhKTtcbiAgICAgICAgICAgIHRoaXMubGV2ZWxzW2xldmVsLmlkXSA9IGxldmVsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gTERUS1dvcmxkO1xufSgpKTtcbmV4cG9ydHMuTERUS1dvcmxkID0gTERUS1dvcmxkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFTdGFyUGF0aEZpbmRlciA9IHZvaWQgMDtcbnZhciBNYXBOb2RlXzEgPSByZXF1aXJlKFwiLi9NYXBOb2RlXCIpO1xudmFyIFBhdGhfMSA9IHJlcXVpcmUoXCIuL1BhdGhcIik7XG52YXIgQVN0YXJQYXRoRmluZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFTdGFyUGF0aEZpbmRlcihtYXApIHtcbiAgICAgICAgdGhpcy5vYmplY3RQb29sID0gW107XG4gICAgICAgIHRoaXMub3Blbkxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5wYXRoRmluZENvdW50ZXIgPSAxO1xuICAgICAgICB0aGlzLndpZHRoID0gbWFwLmdldE1hcFdpZHRoKCk7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gbWFwLmdldE1hcEhlaWdodCgpO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5vcGVuID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICB2YXIgYyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA1OyBqKyspIHtcbiAgICAgICAgICAgICAgICBvLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgYy5wdXNoKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vcGVuLnB1c2gobyk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZC5wdXNoKGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vcGVuTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5vYmplY3RQb29sLnB1c2godGhpcy5vcGVuTGlzdFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcGVuTGlzdCA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBhdGhGaW5kQ291bnRlcisrO1xuICAgIH07XG4gICAgQVN0YXJQYXRoRmluZGVyLnByb3RvdHlwZS5nZW5lcmF0ZVBhdGggPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgY3VycmVudCA9IG5vZGU7XG4gICAgICAgIHZhciBwYXRoID0gbmV3IFBhdGhfMS5QYXRoKCk7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBhdGguYWRkKGN1cnJlbnQueCwgY3VycmVudC55KTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuYmxvY2tlZCA9IGZ1bmN0aW9uIChzeCwgc3ksIHgsIHkpIHtcbiAgICAgICAgdmFyIGlnbm9yZUFjdG9ycyA9IHRoaXMuaWdub3JlRmluYWxPY2N1cGF0aW9uICYmIHRoaXMuYXRUYXJnZXQoeCwgeSk7XG4gICAgICAgIGlmICghdGhpcy5tYXAubG9jYXRpb25EaXNjb3ZlcmVkKHgsIHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tYXAuYmxvY2tlZCh0aGlzLm1vdmVyLCBudWxsLCBzeCwgc3ksIHgsIHksIGlnbm9yZUFjdG9ycywgdGhpcy5hdFRhcmdldCh4LCB5KSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuYXRUYXJnZXQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBmb3IgKHZhciB4cyA9IDA7IHhzIDwgdGhpcy5tb3Zlci5nZXRUaWxlc1dpZHRoKCk7IHhzKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIHlzID0gMDsgeXMgPCB0aGlzLm1vdmVyLmdldFRpbGVzSGVpZ2h0KCk7IHlzKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoKHggKyB4cyA9PSB0aGlzLnR4KSAmJiAoeSArIHlzID09IHRoaXMudHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBBU3RhclBhdGhGaW5kZXIucHJvdG90eXBlLmZpbmRQYXRoID0gZnVuY3Rpb24gKG1vdmVyLCB0eCwgdHksIG1heCwgaWdub3JlRmluYWxPY2N1cGF0aW9uLCBydW5Bd2F5KSB7XG4gICAgICAgIHR4ID0gTWF0aC5mbG9vcih0eCk7XG4gICAgICAgIHR5ID0gTWF0aC5mbG9vcih0eSk7XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICB0aGlzLmlnbm9yZUZpbmFsT2NjdXBhdGlvbiA9IGlnbm9yZUZpbmFsT2NjdXBhdGlvbjtcbiAgICAgICAgdGhpcy5tb3ZlciA9IG1vdmVyO1xuICAgICAgICB0aGlzLnR4ID0gdHg7XG4gICAgICAgIHRoaXMudHkgPSB0eTtcbiAgICAgICAgaWYgKHRoaXMuYmxvY2tlZCh0eCwgdHksIHR4LCB0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5hZGRMb2NhdGlvbihudWxsLCBNYXRoLmZsb29yKG1vdmVyLmdldFRpbGVNYXBYKCkpLCBNYXRoLmZsb29yKG1vdmVyLmdldFRpbGVNYXBZKCkpKTtcbiAgICAgICAgd2hpbGUgKHRoaXMub3Blbkxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGJlc3QgPSB0aGlzLm9wZW5MaXN0WzBdO1xuICAgICAgICAgICAgdGhpcy5vcGVuTGlzdC5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICAvLyBpZiBiZXN0IGlzIHRoZSB0YXJnZXQgdGhlbiB3ZSd2ZSBmb3VuZCBpdCFcbiAgICAgICAgICAgIGlmICh0aGlzLmF0VGFyZ2V0KGJlc3QueCwgYmVzdC55KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUGF0aChiZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkTG9jYXRpb24oYmVzdCwgYmVzdC54ICsgMSwgYmVzdC55KTtcbiAgICAgICAgICAgIHRoaXMuYWRkTG9jYXRpb24oYmVzdCwgYmVzdC54IC0gMSwgYmVzdC55KTtcbiAgICAgICAgICAgIHRoaXMuYWRkTG9jYXRpb24oYmVzdCwgYmVzdC54LCBiZXN0LnkgKyAxKTtcbiAgICAgICAgICAgIHRoaXMuYWRkTG9jYXRpb24oYmVzdCwgYmVzdC54LCBiZXN0LnkgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuYWRkTG9jYXRpb24gPSBmdW5jdGlvbiAocGFyZW50LCB4LCB5KSB7XG4gICAgICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgICAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgICAgICAgdmFyIHN4ID0geDtcbiAgICAgICAgdmFyIHN5ID0geTtcbiAgICAgICAgdmFyIGRpciA9IEFTdGFyUGF0aEZpbmRlci5OT05FO1xuICAgICAgICBpZiAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN4ID0gcGFyZW50Lng7XG4gICAgICAgICAgICBzeSA9IHBhcmVudC55O1xuICAgICAgICAgICAgaWYgKHN5ICsgMSA9PSB5KSB7XG4gICAgICAgICAgICAgICAgZGlyID0gQVN0YXJQYXRoRmluZGVyLk5PUlRIX1RPX1NPVVRIO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN5IC0gMSA9PSB5KSB7XG4gICAgICAgICAgICAgICAgZGlyID0gQVN0YXJQYXRoRmluZGVyLlNPVVRIX1RPX05PUlRIO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN4ICsgMSA9PSB4KSB7XG4gICAgICAgICAgICAgICAgZGlyID0gQVN0YXJQYXRoRmluZGVyLldFU1RfVE9fRUFTVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzeCAtIDEgPT0geCkge1xuICAgICAgICAgICAgICAgIGRpciA9IEFTdGFyUGF0aEZpbmRlci5FQVNUX1RPX1dFU1Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm1hcC52YWxpZExvY2F0aW9uKHgsIHkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgaXQncyBpbiB0aGUgb3BlbiBsaXN0IGlnbm9yZVxuICAgICAgICBpZiAodGhpcy5vcGVuW3ggKyAoeSAqIHRoaXMud2lkdGgpXVtkaXJdID09IHRoaXMucGF0aEZpbmRDb3VudGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkW3ggKyAoeSAqIHRoaXMud2lkdGgpXVtkaXJdID09IHRoaXMucGF0aEZpbmRDb3VudGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgaXQncyBibG9ja2VkIGZvciBhbnkgcmVhc29uLCBhZGQgaXQgdG8gdGhlIGNsb3NlZFxuICAgICAgICBpZiAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuZGVwdGggPiB0aGlzLm1heCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VkW3ggKyAoeSAqIHRoaXMud2lkdGgpXVtkaXJdID0gdGhpcy5wYXRoRmluZENvdW50ZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5tYXAubG9jYXRpb25EaXNjb3ZlcmVkKHgsIHkpKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZFt4ICsgKHkgKiB0aGlzLndpZHRoKV1bZGlyXSA9IHRoaXMucGF0aEZpbmRDb3VudGVyO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJsb2NrZWQoc3gsIHN5LCB4LCB5KSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWRbeCArICh5ICogdGhpcy53aWR0aCldW2Rpcl0gPSB0aGlzLnBhdGhGaW5kQ291bnRlcjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBvdGhlcndpc2UgaXQncyBhIHBvc3NpYmxlIHN0ZXAgYWRkIGl0IHRvIHRoZSBvcGVuXG4gICAgICAgIHRoaXMub3Blblt4ICsgKHkgKiB0aGlzLndpZHRoKV1bZGlyXSA9IHRoaXMucGF0aEZpbmRDb3VudGVyO1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTWFwTm9kZSh4LCB5LCBwYXJlbnQsIHRoaXMuZ2V0SGV1cmlzdGljKHgsIHkpKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9wZW5MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMub3Blbkxpc3RbaV07XG4gICAgICAgICAgICBpZiAoY3VycmVudC5oID4gbm9kZS5oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuTGlzdC5zcGxpY2UoaSwgMCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIG5vIHdoZXJlIGVsc2UgYWRkIGl0IGF0IHRoZSBlbmRcbiAgICAgICAgdGhpcy5vcGVuTGlzdC5wdXNoKG5vZGUpO1xuICAgIH07XG4gICAgQVN0YXJQYXRoRmluZGVyLnByb3RvdHlwZS5nZXRIZXVyaXN0aWMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAvLyBkaXN0YW5jZSBzcXVhcmVkXG4gICAgICAgIHZhciBkeCA9IE1hdGguYWJzKHRoaXMudHggLSB4KTtcbiAgICAgICAgdmFyIGR5ID0gTWF0aC5hYnModGhpcy50eSAtIHkpO1xuICAgICAgICByZXR1cm4gKGR4ICogZHgpICsgKGR5ICogZHkpO1xuICAgIH07XG4gICAgLy8gb2JqZWN0IHBvb2wgYWNjZXNzb3IgLSBmcmVlIGlzIGRvbmUgaW4gYnVsa1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuY3JlYXRlTWFwTm9kZSA9IGZ1bmN0aW9uICh4LCB5LCBwYXJlbnQsIGgpIHtcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0UG9vbC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdmFyIG4gPSBuZXcgTWFwTm9kZV8xLk1hcE5vZGUoKTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0UG9vbC5wdXNoKG4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5vYmplY3RQb29sWzBdO1xuICAgICAgICB0aGlzLm9iamVjdFBvb2wuc3BsaWNlKDAsIDEpO1xuICAgICAgICBub2RlLnggPSB4O1xuICAgICAgICBub2RlLnkgPSB5O1xuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgbm9kZS5oID0gaDtcbiAgICAgICAgaWYgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLmRlcHRoID0gcGFyZW50LmRlcHRoICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuZGVwdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgQVN0YXJQYXRoRmluZGVyLk5PUlRIX1RPX1NPVVRIID0gMDtcbiAgICBBU3RhclBhdGhGaW5kZXIuRUFTVF9UT19XRVNUID0gMTtcbiAgICBBU3RhclBhdGhGaW5kZXIuU09VVEhfVE9fTk9SVEggPSAyO1xuICAgIEFTdGFyUGF0aEZpbmRlci5XRVNUX1RPX0VBU1QgPSAzO1xuICAgIEFTdGFyUGF0aEZpbmRlci5OT05FID0gNDtcbiAgICByZXR1cm4gQVN0YXJQYXRoRmluZGVyO1xufSgpKTtcbmV4cG9ydHMuQVN0YXJQYXRoRmluZGVyID0gQVN0YXJQYXRoRmluZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hcE5vZGUgPSB2b2lkIDA7XG52YXIgTWFwTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBOb2RlKCkge1xuICAgIH1cbiAgICByZXR1cm4gTWFwTm9kZTtcbn0oKSk7XG5leHBvcnRzLk1hcE5vZGUgPSBNYXBOb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhdGggPSB2b2lkIDA7XG52YXIgU3RlcF8xID0gcmVxdWlyZShcIi4vU3RlcFwiKTtcbnZhciBQYXRoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhdGgoKSB7XG4gICAgICAgIHRoaXMuc3RlcHMgPSBuZXcgQXJyYXkoKTtcbiAgICB9XG4gICAgUGF0aC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5zdGVwcy5zcGxpY2UoMCwgMCwgbmV3IFN0ZXBfMS5TdGVwKHgsIHkpKTtcbiAgICB9O1xuICAgIFBhdGgucHJvdG90eXBlLmdldExhc3RTdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwc1t0aGlzLnN0ZXBzLmxlbmd0aCAtIDFdO1xuICAgIH07XG4gICAgUGF0aC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdGVwc1swXTtcbiAgICAgICAgdGhpcy5zdGVwcy5zcGxpY2UoMCwgMSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICByZXR1cm4gUGF0aDtcbn0oKSk7XG5leHBvcnRzLlBhdGggPSBQYXRoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0ZXAgPSB2b2lkIDA7XG52YXIgU3RlcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGVwKHgsIHkpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG4gICAgcmV0dXJuIFN0ZXA7XG59KCkpO1xuZXhwb3J0cy5TdGVwID0gU3RlcDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNjA3KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=